<!DOCTYPE html>
<html>

<head>
    <title>
        <%- (blocks.title) ? blocks.title + " | " : "" %>
            <%= viewsVars.title %>
    </title>
    <meta name="fragment" content="!">
    <meta name="turbolinks-cache-control" content="no-cache">

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!-- Google -->
    <meta name="description" content="<%= viewsVars.description %>" />
    <meta name="keywords" content="<%= viewsVars.keywords %>" />

    <!-- +Google -->
    <link rel="author" href="<%= viewsVars.googleProfile %>">
    <link rel="publisher" href="<%= viewsVars.googleProfile %>">
    <meta itemprop="name" content="<%= viewsVars.title %>">
    <meta itemprop="description" content="<%= viewsVars.description %>">
    <meta itemprop="image" content="<%= viewsVars.urlWebSite %><%= viewsVars.image %>">

    <script type="application/ld+json">
        {
            "@context": "http://schema.org",
            "@type": "Organization",
            "url": "<%= viewsVars.urlWebSite %><%= viewsVars.route %>",
            "name": "<%= viewsVars.title %>",
            "logo": "<%= viewsVars.urlWebSite %><%= viewsVars.logo %>",
            "sameAs": [
                "<%= viewsVars.googleProfile %>",
                "<%= viewsVars.facebookProfile %>",
                "<%= viewsVars.twitterProfile %>"
            ]
        }
    </script>

    <!-- Facebook -->
    <meta property="og:type" content="<%= viewsVars.og_type %>">
    <meta property="og:url" content="<%= viewsVars.urlWebSite %><%= viewsVars.route %>" />
    <meta property="og:title" content="<%= viewsVars.title %>" />
    <meta property="og:description" content="<%= viewsVars.description %>" />
    <meta property="og:image" content="<%= viewsVars.urlWebSite %><%= viewsVars.image %>" />

    <!-- Twitter -->
    <meta name="twitter:card" content="<%= viewsVars.twitterCard %>" />
    <meta name="twitter:site" content="<%= viewsVars.twitterAccount %>" />
    <meta name="twitter:title" content="<%= viewsVars.title %>" />
    <meta name="twitter:description" content="<%= viewsVars.description %>" />
    <meta name="twitter:image" content="<%= viewsVars.urlWebSite %><%= viewsVars.image %>" />

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/style.css">
    <link rel="stylesheet" href="/styles/basicRenew.css">
    <!--STYLES END-->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <% if(sails.config.environment == 'development' ){ %>
        <script src="http://localhost:35729/livereload.js"></script>
        <% } %>

            <!--SCRIPTS-->
            <script src="/js/bundle.js"></script>
            <!--SCRIPTS END-->

            <!-- <script src="<%- blocks.localScripts %>"></script> -->
</head>

<body <%- blocks.bodyTags=blocks.bodyTags || "" %>>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->
    <!-- <%= req %> -->
    <%- (!blocks.hideNav && !blocks.hideAll) ? partial('nav'): null %>
        <div class="<%- (!blocks.hideNav && !blocks.hideAll) ? 'page-wrapper': '' %>" style="min-height: 316px;" turboRenderDOM>
            <!-- <div class="container m-n w-full h-full" turboRenderDOM> -->
            <%- body %>
            <%- (!blocks.hideFooter && !blocks.hideAll) ? partial('footer'): null %>
        </div>
</body>

</html>
